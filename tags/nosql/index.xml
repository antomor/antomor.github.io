<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nosql on Antomor</title>
    <link>https://antomor.com/tags/nosql/</link>
    <description>Recent content in nosql on Antomor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 28 Dec 2019 18:06:38 +0100</lastBuildDate>
    
	<atom:link href="https://antomor.com/tags/nosql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mongodb Query Profiler</title>
      <link>https://antomor.com/blog/mongodb-query-profiler/</link>
      <pubDate>Sat, 28 Dec 2019 18:06:38 +0100</pubDate>
      
      <guid>https://antomor.com/blog/mongodb-query-profiler/</guid>
      <description>Some months ago, I was creating a web page to show some aggregated data, but I soon noticed the API used to retrieve the data was very slow. After investigating on the possible issue, we discovered the bottleneck: the database. The solution was to re-structure the data to make it consumable from a web page.
Although I had used sometimes the SQLServer profiler, I had no experience about MongoDB profiler, so here below the steps involved to analyse a MongoDB query.</description>
    </item>
    
  </channel>
</rss>