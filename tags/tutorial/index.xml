<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on Antomor</title>
    <link>https://antomor.com/tags/tutorial/</link>
    <description>Recent content in tutorial on Antomor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 09 Apr 2020 19:40:48 +0200</lastBuildDate>
    
	<atom:link href="https://antomor.com/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular and Rxjs Http Requests: Common scenarios</title>
      <link>https://antomor.com/blog/angular-rxjs-http-requests/</link>
      <pubDate>Thu, 09 Apr 2020 19:40:48 +0200</pubDate>
      
      <guid>https://antomor.com/blog/angular-rxjs-http-requests/</guid>
      <description>Any modern web application needs soon or later to perform some http request to retrieve data. Here below I&amp;rsquo;ll describe some common scenario and how to perform such requests using RxJS.
Single request The most common scenario, no special rxjs handling, since that Angular provides an Http service that returns an Observable.
services.getItems().subscribe();  Is that easy? Yes. In the particular example, I assumed the http service call was inside the service.</description>
    </item>
    
    <item>
      <title>Git: Move Files Retaining History</title>
      <link>https://antomor.com/blog/git-move-file-with-history/</link>
      <pubDate>Sat, 14 Mar 2020 12:28:03 +0100</pubDate>
      
      <guid>https://antomor.com/blog/git-move-file-with-history/</guid>
      <description>Sometimes ago we need to create a new product, that shares many functionalities with the existing one. The first idea was to extract some of the code in a library, to be then imported and used independently in the two projects.
After creating the repository for the library, the first action I would have done was copying the files from one repo to another. Well, it works like a charm, it’s fast and it doesn’t require any particular expertise, a normal drag and drop operation.</description>
    </item>
    
    <item>
      <title>Mongodb Query Profiler</title>
      <link>https://antomor.com/blog/mongodb-query-profiler/</link>
      <pubDate>Sat, 28 Dec 2019 18:06:38 +0100</pubDate>
      
      <guid>https://antomor.com/blog/mongodb-query-profiler/</guid>
      <description>Some months ago, I was creating a web page to show some aggregated data, but I soon noticed the API used to retrieve the data was very slow. After investigating on the possible issue, we discovered the bottleneck: the database. The solution was to re-structure the data to make it consumable from a web page.
Although I had used sometimes the SQLServer profiler, I had no experience about MongoDB profiler, so here below the steps involved to analyse a MongoDB query.</description>
    </item>
    
    <item>
      <title>Security Headers on Static Websites</title>
      <link>https://antomor.com/blog/security-headers-on-static-websites/</link>
      <pubDate>Thu, 26 Dec 2019 10:56:23 +0100</pubDate>
      
      <guid>https://antomor.com/blog/security-headers-on-static-websites/</guid>
      <description>When I started this blog, I evaluated many options:
 blogging platform vs static-generated website self-hosted vs hosted solutions costs and many more.  I ended up trying to build something very simple, consisting in a static website hosted on GitHub Pages. With this solution, I have been able to cut the cost on any host solution, since that, being a dev, I am quite comfortable in writing in a text editor.</description>
    </item>
    
  </channel>
</rss>